
<head><title> Q4 </title></head>
<body>

<?php
include 'open.php';

//Override the PHP configuration file to display all errors
//This is useful during development but generally disabled before release
ini_set('error_reporting', E_ALL);
ini_set('display_errors', true);

//Collect the posted value in a variable called $ticker
$inputTicker = $_POST['inputTicker'];
$weekDateStart = $_POST['weekDateStart'];
$weekDateEnd = $_POST['weekDateEnd'];

echo "<h2>Q4: For market index ".$inputTicker.", of the top 10 number of days between ".$weekDateStart." and ".$weekDateEnd."  with the greatest volume, which dates were green? What were the opening and closing prices on those days?</h2>";

$dataPoints = array();

//Determine if any input was actually collected
if (empty($inputTicker) or empty($weekDateStart) or empty($weekDateEnd)) {

   echo "Empty inputs detected.<br><br>";

}

else {

   //Prepare a statement that we can later execute. The ?'s are placeholders for
   //parameters whose values we will set before we run the query.
   if ($stmt = $conn->prepare("CALL Q4(?, ?, ?)")) {

      //Attach the ? in prepared statements to variables (even if those variables
      //don't hold the values we want yet).  First parameter is a list of types of
      //the variables that follow: 's' means string, 'i' means integer, 'd' means
      //double. E.g., for a statment with 3 ?'s, where middle parameter is an integer
      //and the other two are strings, the first argument included should be "sis".
      $stmt->bind_param("sss", $inputTicker, $weekDateStart, $weekDateEnd);

      //Run the actual query
      if ($stmt->execute()) {

         //Store result set generated by the prepared statement
         $result = $stmt->get_result();

         if ($weekDateStart > $weekDateEnd) {
            echo "Error: Start date is after end date.";
         } elseif ($weekDateStart < '1999-03-10' || $weekDateEnd > '2017-11-10') {
            echo "Invalid dates.";
	      } elseif ($result->num_rows == 0) {
            //Result contains no rows at all
            echo "Invalid sectors/dates or no such days found for these sectors between ".$weekDateStart." and ".$weekDateEnd.".";
	      } else {
            //Create table to display results
            echo "<table border=\"1px solid black\">";
            echo "<tr><th> Date </th> <th> Open Price </th><th> Close Price </th></tr>";

            //Report result set by visiting each row in it
            while ($row = $result->fetch_row()) {
               array_push($dataPoints, array( "label"=>$row[0],
                                              "y"=> [$row[1], $row[2]]
                                             ));

               echo "<tr>";
               echo "<td>".$row[0]."</td>";
               echo "<td>".$row[1]."</td>";
               echo "<td>".$row[2]."</td>";
               echo "</tr>";
            } 
         
	 
            echo "</table>";
         }	 

         //We are done with the result set returned above, so free it
         $result->free_result();
      
      } else {

         //Call to execute failed, e.g. because server is no longer reachable,
	 //or because supplied values are of the wrong type
         echo "Execute failed.<br>";
      }

      //Close down the prepared statement
      $stmt->close();

   } else {

       //A problem occurred when preparing the statement; check for syntax errors
       //and misspelled attribute names in the statement string.
      echo "Prepare failed.<br>";
      $error = $conn->errno . ' ' . $conn->error;
      echo $error; 
   }

}

//Close the connection created in open.php
$conn->close();
?>

<script>
window.onload = function () {

var chart = new CanvasJS.Chart("chartContainer", {
   theme: "light2",
   title: {
         text: "",
         fontFamily: 'tahoma'
      },
      dataPointMinWidth: 80,
         axisY: {
            //includeZero: true,
            interval: 20,
            minimum: null,
            title: "Price ($)"
         },
         axisX: {
            interval: 1,
            intervalType: "itemID",
            labelAngle: -45
         },
         toolTip: {content: "min: ${y[0]}, max: ${y[1]}"},
         data: [{
            type: "rangeColumn",
            color: "#369EAD",
	    //json_encode function called below transforms numeric strings into numbers
            dataPoints: <?php echo json_encode($dataPoints, JSON_NUMERIC_CHECK); ?>
         }]
});
chart.render();

}
</script>
<div id="chartContainer" style="height: 300px; width: 80%;"></div>
<script src="https://canvasjs.com/assets/script/canvasjs.min.js"></script>
</body>
</html>

</body>

